existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt)) %>%
rename(col1 = timecol,col2 = varcol) %>%
distinct(col1,col2,.keep_all = TRUE) %>%
rename('Interval' = col1, 'variable' = col2) %>%
write.csv(path,row.names = FALSE)
View(newdf)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
View(newdf)
distinctcols <- c("Interval","variable")
newdf[!duplicated(newdf[,distinctcols])]
newdf[!duplicated(newdf[,distinctcols]),]
df2 <- newdf[!duplicated(newdf[,distinctcols]),]
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,distinctcols) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,c("Interval","variable"))
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,distinctcols) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
smartSaveCSV(df,path,c("Interval","variable"))
View(df2)
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
View(newdf)
View(df)
View(df)
View(existingdf)
existingdf <- read.csv(path)
View(existingdf)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
View(newdf)
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,distinctcols) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,c("Interval","variable"))
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,distinctcols) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,c("Interval","variable"))
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,distinctcols) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,c("Interval","variable"))
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,distinctcols) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,c("Interval","variable"))
df <- getForecastVsActual() %>%
getWindPenetration()
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
df <- getForecastVsActual() %>%
getWindPenetration()
colheader<- colnames(df)
colheader
colheader-"value"
colheader["value"] <- NULL
colheader['value'] <- NULL
x2 <- colheader[!colheader %in% "value"]
x2
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,valuecol) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
colheader<- colnames(df)
colheader <- colheader[!colheader %in% valuecol]
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,"value")
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,valuecol) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
colheader<- colnames(df)
colheader <- colheader[!colheader %in% valuecol]
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,distinctcols]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,"value")
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
source("R/helperMethods.R")
library(lubridate)
#' @export smartSaveCSV
#' @import lubridate
#' @importFrom utils read.csv write.csv
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
smartSaveCSV <- function(df,csvfile,valuecol) {
existingdf <- read.csv(path)
existingdf[[dateColName]] <- ymd_hms(existingdf[[dateColName]])
existingdf$ModifiedAt <- ymd_hms(existingdf$ModifiedAt)
colheader<- colnames(df)
colheader <- colheader[!colheader %in% valuecol]
newdf <- rbind(existingdf,df) %>%
arrange(desc(ModifiedAt))
df2 <- newdf[!duplicated(newdf[,colheader]),] %>%
write.csv(path,row.names = FALSE)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
# rm(list = c("combine_df_Columns", "format_DateTime", "getForecastVsActual", "getGenMix"))
smartSaveCSV(df,path,"value")
source("R/helperMethods.R")
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
library(lubridate)
source("R/helperMethods.R")
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
library(lubridate)
library(smartSaveCSV)
library(smartSaveCSV)
getwd()
setwd("~/Git/smartSaveTest")
source("R/helperMethods.R")
source("helperMethods.R")
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
library(lubridate)
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
library(smartSaveCSV)
smartSaveCSV(df,path,"value")
source("helperMethods.R")
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
library(lubridate)
library(smartSaveCSV)
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name){
file.create(name)
}
df <- getForecastVsActual() %>%
getWindPenetration()
dateColName <- "Interval"
df[[dateColName]] <- ymd_hms(df[[dateColName]])
df$ModifiedAt <- Sys.time()
df$ModifiedAt <- ymd_hms(df$ModifiedAt)
month_year <- format(as.Date(Sys.Date()), "%m_%Y")
name <- paste("Wpen_Forecast_Vs_Actual_",month_year,".csv",sep="")
day_of_the_month <- format(as.Date(Sys.Date()), "%d")
path <- paste("Data/",name,sep="")
if(day_of_the_month ==1){
createBlankCSV(path)
write.csv(df,path,row.names = FALSE)
}
smartSaveCSV(df,path,"value")
install.packages("styler")
styler::tidyverse_style()
styler::tidyverse_style()
styler::tidyverse_style()
styler:::style_selection()
styler:::style_selection()
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::style_selection()
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::style_active_file()
styler:::style_active_file()
styler::tidyverse_style()
library(styler)
diamonds %>% df <- getForecastVsActual() %>%
getWindPenetration()
df <- diamonds %>% getForecastVsActual() %>%
getWindPenetration()
diamonds %>% getForecastVsActual() %>%
getWindPenetration()
source("helperMethods.R")
# setwd(dirname(rstudioapi::isAvailable()::getActiveDocumentContext()$path))
library(lubridate)
library(smartSaveCSV)
getWindPenetration <- function(df) {
df %>% dplyr::filter(variable %in% c("wind_pen_actual", "wind_pen_STF", "wind_pen_MTF"))
}
createBlankCSV <- function(name) {
file.create(name)
}
diamonds %>%
getForecastVsActual() %>%
getWindPenetration()
styler:::style_selection()
styler::tidyverse_style()
styler::tidyverse_style()
install.packages("styler")
install.packages("styler")
